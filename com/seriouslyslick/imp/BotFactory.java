/**
 * BotFactory.java
 * Tom Frost
 * August 12, 2006
 * 
 * Returns the main bot object.
 */
package com.seriouslyslick.imp;

import java.io.IOException;

/**
 * The BotFactory manages all the main singletons for the Imp framework, as well as their
 * dependencies.
 * <p>
 * BotFactory supplies the following Singleton classes:
 * <ul>
 * <li>{@link Imp}
 * <li>{@link ModuleManager}
 * <li>{@link ConfigurationManager}
 * </ul>
 * <p>
 * Retrieving these singletons from BotFactory does not guarantee that they are initialized and
 * ready for framework use.  The {@link #initialize()} method must be called before that guarantee
 * can be made.  See the documentation for {@link #initialize()} to determine when it should be called.
 *
 * @author Tom Frost
 * @since 1.0
 * @version 1.0
 */
public class BotFactory {
	private static final Imp bot = new Imp();
	private static ConfigurationManager configurationManager = new ConfigurationManager();
	private static ModuleManager moduleManager = new ModuleManager();
	
	// We don't want anyone instantiating this...
	private BotFactory() {}
	
	/**
	 * Gets the Imp object singleton extending PircBot which controls this IRC session.
	 * 
	 * @return the executing Imp object.
	 */
	public static Imp getBot() {
		return bot;
	}
	
	/**
	 * Prepares the {@link ConfigurationManager} singleton for activity.  This should only be called once, near the beginning of the
	 * bot's execution.  This method will return <code>false</code> if executed a subsequent time.
	 *
	 * @param config The configuration set to load/create.  Use <code>null</code> for the default configuration set.
	 * @return <code>true</code> if the configuration exists; <code>false</code> if it had to be created with default values.
	 * @throws IOException Passes along any IOException generated by calling {@link ConfigurationManager#initialize(String)}.
	 */
	public static boolean initConfigurationManager(String config) throws IOException {
		if (!configurationManager.isInitialized())
			return configurationManager.initialize(config);
		return false;
	}
	
	/**
	 * Prepares the {@link ModuleManager} singleton for activity.  This should only be called once, near the beginning of the
	 * bot's execution.  This method will return <code>false</code> if executed a subsequent time.  This method will fail if
	 * {@link #initConfigurationManager(String)} hasn't been called prior to this.
	 *
	 * @param config The configuration set to load/create.  Use <code>null</code> for the default configuration set.
	 * @return <code>true</code> if the ModuleManager was initialized properly; <code>false</code> if initialization failed.
	 */
	public static boolean initModuleManager() {
		if (moduleManager == null)
			moduleManager = new ModuleManager();
		if (!moduleManager.isInitialized() && configurationManager != null && configurationManager.isInitialized()) {
			moduleManager.initialize();
			return true;
		}
		return false;
	}
	
	/**
	 * Gets this session's {@link ModuleManager} singleton.  If the controlling class has not yet called {@link #initialize()},
	 * the result will be <code>null</code>.
	 * 
	 * @return the {@link ModuleManager} for this session. 
	 */
	public static ModuleManager getModuleManager() {
		return moduleManager;
	}
	
	/**
	 * Gets this session's {@link ConfigurationManager} singleton.  If the controlling class has not yet called {@link #initialize()},
	 * the result will be <code>null</code>.
	 * 
	 * @return the {@link ConfigurationManager} for this session.
	 */
	public static ConfigurationManager getConfigurationManager() {
		return configurationManager;
	}
}
